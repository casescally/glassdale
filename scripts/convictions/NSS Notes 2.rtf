{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
-----12/10/19-----\
\
make an object\
\
convert it into a string\
\
send it\
\
need to send between api and json server\
\
document queryselector\
\
\
create some thing = post\
\
 noteform should not be responsible for interacting with api\
\
dataprovider interacts with api\
\
export const saveNote = note => \{\
	fetch('http://localhost:8088/notes', \{\
\
	method: "post",\
\
	headers: \{\
\
		"Content-Type": "application/json"\
\},\
\
	body: JSON.stringify(note)\
\})\
.then(getNotes)\
\}\
\
\
want to keep application state and database state in sync as much as possible\
\
state transition\
\
provider now provides a state transition for the API\
\
we created an object, now we need to give it to the function that will send it to an API\
\
saveNote(newNote)\
\
savenote stringifys the oobject and \
\
\
note\
\
saveNote()\
\
getNote()\
\
json-server -w notes.json -p 8088\
\
-w = watch the file\
\
-p specify which port\
\
needs to be the same port or the fetch call won't work\
\
\
when doing api operations like an http call open dev tools network tab\
\
pre flight request\
\
request method: OPTIONS\
\
request method 2\
\
\
request payload is the stringified object\
\
\
status code tells you if it worked or not\
\
anything that starts with a 2 = success\
\
id is primary key\
\
\
modified the file for you with a post request\
\
\
export const getNotes = () => \{\
\
	return fetch("http://localhost:8088/notes")\
		.then(response => response.json())\
		.then(setNotes)\
\}\
\
const setNotes = (noteArray) =>  \{\
	notes = noteArray.slice()\
\})\
\
getnotes()\
\
returning the fetch\
\
this is an asycronous operation\
\
\
getNotes().then(\
	() => \{\
		\
\
\
noteform should communicate through the eventhub\
\
make the message then display the message\
\
\
const message = new CustomEvent("showNoteButtonClicked")\
\}\
)\
\
\
what can we put at the end of fetch? - .then\
\
when a function returns something store it in a variable\
\
\
\
\
\
eventhub.addEventListener("showNoteButtonClicked", event =>  \{\
	getNotes().then(\
	\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 -----12/11/19-----\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
what is the state of the database, how many items in database\
\
want to keep database and application state in sync\
\
\
fetch and a get\
\
\
getNotes from notesprovider\
\
\
useNotes gets data out of provider into another component\
\
\
\
need to fetch then invoke the useNotes\
\
\
getNotes .then useNotes\
\
\
the api data is fetched and stored in an array in your code = state of the database and the state of the application are in sync\
\
getting data from the api to the application\
\
deploying to a database will be different - what we are learning is just examlpes of the language to talk to a database\
\
database has a notes recourse in example\
\
the information in our application and the the database are reflected in one another\
\
\
api state vs app state\
\
\
to make sure the states match you need to preform another fetch\
\
all this code is doing is getting an item from an api and putting it into an array in your code\
\
\
get create get\
\
\
.then(\
	() => saveNote(\{\})\
)\
.then(\
	() => getNotes()\
)\
.then(\
	() =>\
\
\
every time the user changes something about the data\
\
any time there is a change to the database you have to do another get to the api so you can have the updated code in your application\
\
\
you are writing the automation - it will be stored in event listeners which will listen for a change then talk to the api to preform a task to the api database and then update your application code to reflect the change\
\
\
\
when you click the save note button the state change will happen in the api\
\
\
using 2 getNotes() function to make sure that the states match\
\
\
they won't show automatically if you don't get them\
\
\
application state won't have have item if you don't get them from the api\
\
\
when you want some data in the empty array in the application = application state\
\
you have to get them from the api\
\
*deleted sumbit button with get request*\
\
when we submitted a note we sent it to the api but we never pulled it back into our application, thus the inability to display said data\
\
on main.js we synced the state up\
\
notes.json is in the \ul api\ulnone \
\
\
get on first page load but no get on save note,\
\
must do another git\
\
show notes on button click\
\
application and api are completely separate things\
\
state management is making sure the api and your app are in sync\
\
creating your own personal api on your computer-chapter 6\
\
json.server is the application installed on your computer-running api and doing that mock behavior for you\
\
each component should be considered independent\
\
taking the load off other teams be making sure getnotes is invoked whenever savenoted is called, it will automatically update the api/application state\
\
\
when you invoke it in savenote - it's no longer needed on the NoteListComponent\
\
note			criminal		<button>savenote</button>\
<input field>		<input field>\
\
on page load one of the very first things we do is get the notes\
\
\
getCriminals()\
	.then(getNotes)\
	.then(NoteFormComponent)\
	\
\
\
\
\
\
\
\
\
\
}